name: 🛡️ Shield AI - CI/CD Pipeline

on:
  push:
    branches: [ main, dev, prod ]
  pull_request:
    branches: [ main, dev, prod ]

env:
  NODE_VERSION: '20.x'
  PNPM_VERSION: '8.15.0'

jobs:
  # Security and Dependency Scanning
  security:
    name: 🔒 Security Scan
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request' || github.ref == 'refs/heads/main'
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Full history for better analysis

      - name: 🔍 Run CodeQL Analysis
        uses: github/codeql-action/init@v3
        with:
          languages: javascript,typescript

      - name: 🔍 Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3

      - name: 🛡️ Run Dependency Check
        uses: actions/dependency-review-action@v4
        if: github.event_name == 'pull_request'

      - name: 🔐 Run Security Audit
        run: |
          npm audit --audit-level=moderate
          
      - name: 📊 Upload Security Results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: security-results
          path: |
            sarif-results/
            security-audit.json

  # Code Quality and Linting
  quality:
    name: 📝 Code Quality
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        node-version: [18.x, 20.x]
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🟢 Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'

      - name: 📦 Install dependencies
        run: npm ci --prefer-offline --no-audit

      - name: 🔍 Run ESLint
        run: |
          npm run lint -- --format=json --output-file=eslint-report.json
        continue-on-error: true

      - name: 🎨 Check TypeScript
        run: |
          npx tsc --noEmit --pretty
          
      - name: 📊 Upload lint results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: lint-results-${{ matrix.node-version }}
          path: eslint-report.json

  # Build and Test
  build-test:
    name: 🔨 Build & Test
    runs-on: ubuntu-latest
    needs: [quality]
    
    strategy:
      matrix:
        node-version: [18.x, 20.x]
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🟢 Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'

      - name: 📦 Install dependencies
        run: npm ci --prefer-offline --no-audit

      - name: 🔨 Build application
        run: |
          npm run build
        env:
          # Add any build-time environment variables here
          NODE_ENV: production
          NEXT_TELEMETRY_DISABLED: 1

      - name: 🗜️ Check build size
        run: |
          du -sh .next/
          find .next/ -name "*.js" -exec du -h {} + | sort -hr | head -20

      - name: 📊 Upload build artifacts
        uses: actions/upload-artifact@v4
        if: matrix.node-version == '20.x'
        with:
          name: build-artifacts
          path: |
            .next/
            public/
          retention-days: 7

  # Performance Testing
  performance:
    name: ⚡ Performance Tests
    runs-on: ubuntu-latest
    needs: [build-test]
    if: github.event_name == 'pull_request'
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🟢 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📦 Install dependencies
        run: npm ci --prefer-offline --no-audit

      - name: 📥 Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts

      - name: 🚀 Start application
        run: |
          npm run start &
          sleep 10
          
      - name: ⚡ Run Lighthouse CI
        uses: treosh/lighthouse-ci-action@v10
        with:
          uploadArtifacts: true
          temporaryPublicStorage: true
          configPath: './.github/lighthouse/lighthouserc.json'

  # Deployment to Development
  deploy-dev:
    name: 🚀 Deploy to Development
    runs-on: ubuntu-latest
    needs: [security, quality, build-test]
    if: github.ref == 'refs/heads/dev' && github.event_name == 'push'
    environment: development
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🟢 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📦 Install dependencies
        run: npm ci --prefer-offline --no-audit

      - name: 🔨 Build for development
        run: npm run build
        env:
          NODE_ENV: production
          NEXT_TELEMETRY_DISABLED: 1
          # Development environment variables
          NEXT_PUBLIC_SUPABASE_URL: ${{ secrets.DEV_NEXT_PUBLIC_SUPABASE_URL }}
          NEXT_PUBLIC_SUPABASE_ANON_KEY: ${{ secrets.DEV_NEXT_PUBLIC_SUPABASE_ANON_KEY }}
          NEXT_PUBLIC_STRIPE_PUBLISHABLE_KEY: ${{ secrets.DEV_NEXT_PUBLIC_STRIPE_PUBLISHABLE_KEY }}

      - name: 🚀 Deploy to Vercel (Development)
        uses: amondnet/vercel-action@v25
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
          vercel-args: '--env ENVIRONMENT=development'
          alias-domains: |
            dev-shieldai.vercel.app

      - name: 📝 Comment deployment URL
        uses: actions/github-script@v7
        if: github.event_name == 'pull_request'
        with:
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: '🚀 Development deployment ready at: https://dev-shieldai.vercel.app'
            })

  # Deployment to Staging
  deploy-staging:
    name: 🏗️ Deploy to Staging
    runs-on: ubuntu-latest
    needs: [security, quality, build-test]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: staging
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🟢 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📦 Install dependencies
        run: npm ci --prefer-offline --no-audit

      - name: 🔨 Build for staging
        run: npm run build
        env:
          NODE_ENV: production
          NEXT_TELEMETRY_DISABLED: 1
          # Staging environment variables
          NEXT_PUBLIC_SUPABASE_URL: ${{ secrets.STAGING_NEXT_PUBLIC_SUPABASE_URL }}
          NEXT_PUBLIC_SUPABASE_ANON_KEY: ${{ secrets.STAGING_NEXT_PUBLIC_SUPABASE_ANON_KEY }}
          NEXT_PUBLIC_STRIPE_PUBLISHABLE_KEY: ${{ secrets.STAGING_NEXT_PUBLIC_STRIPE_PUBLISHABLE_KEY }}

      - name: 🚀 Deploy to Vercel (Staging)
        uses: amondnet/vercel-action@v25
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
          vercel-args: '--env ENVIRONMENT=staging'
          alias-domains: |
            staging-shieldai.vercel.app

      - name: 🧪 Run E2E tests against staging
        run: |
          # Add your E2E test commands here
          echo "Running E2E tests against staging environment..."
          # npx playwright test --config=playwright.config.staging.ts

  # Production Deployment
  deploy-production:
    name: 🌟 Deploy to Production
    runs-on: ubuntu-latest
    needs: [deploy-staging]
    if: github.ref == 'refs/heads/prod' && github.event_name == 'push'
    environment: production
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🟢 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📦 Install dependencies
        run: npm ci --prefer-offline --no-audit

      - name: 🔨 Build for production
        run: npm run build
        env:
          NODE_ENV: production
          NEXT_TELEMETRY_DISABLED: 1
          # Production environment variables
          NEXT_PUBLIC_SUPABASE_URL: ${{ secrets.NEXT_PUBLIC_SUPABASE_URL }}
          NEXT_PUBLIC_SUPABASE_ANON_KEY: ${{ secrets.NEXT_PUBLIC_SUPABASE_ANON_KEY }}
          NEXT_PUBLIC_STRIPE_PUBLISHABLE_KEY: ${{ secrets.NEXT_PUBLIC_STRIPE_PUBLISHABLE_KEY }}
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          STRIPE_SECRET_KEY: ${{ secrets.STRIPE_SECRET_KEY }}
          STRIPE_WEBHOOK_SECRET: ${{ secrets.STRIPE_WEBHOOK_SECRET }}

      - name: 🚀 Deploy to Vercel (Production)
        uses: amondnet/vercel-action@v25
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
          vercel-args: '--prod --env ENVIRONMENT=production'

      - name: 🏥 Health check
        run: |
          sleep 30
          curl -f https://shieldai.vercel.app/api/health || exit 1

      - name: 📊 Deploy notification
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.repos.createDeploymentStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              deployment_id: context.payload.deployment.id,
              state: 'success',
              environment_url: 'https://shieldai.vercel.app',
              description: 'Production deployment successful'
            })

  # Post-deployment monitoring
  monitor:
    name: 📊 Post-deployment Monitoring
    runs-on: ubuntu-latest
    needs: [deploy-production]
    if: github.ref == 'refs/heads/prod'
    
    steps:
      - name: 🏥 Health monitoring
        run: |
          # Monitor application health for 5 minutes
          for i in {1..10}; do
            echo "Health check $i/10..."
            curl -f https://shieldai.vercel.app/api/health
            sleep 30
          done

      - name: ⚡ Performance monitoring
        run: |
          # Run basic performance checks
          curl -w "@-" -o /dev/null -s https://shieldai.vercel.app << 'EOF'
          time_total: %{time_total}s
          time_connect: %{time_connect}s
          time_starttransfer: %{time_starttransfer}s
          speed_download: %{speed_download} bytes/sec
          EOF

  # Cleanup
  cleanup:
    name: 🧹 Cleanup
    runs-on: ubuntu-latest
    needs: [deploy-production, monitor]
    if: always()
    
    steps:
      - name: 🗑️ Clean up artifacts
        uses: actions/github-script@v7
        with:
          script: |
            const artifacts = await github.rest.actions.listWorkflowRunArtifacts({
              owner: context.repo.owner,
              repo: context.repo.repo,
              run_id: context.runId,
            });
            
            for (const artifact of artifacts.data.artifacts) {
              if (artifact.name.includes('temp-')) {
                await github.rest.actions.deleteArtifact({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  artifact_id: artifact.id,
                });
              }
            }