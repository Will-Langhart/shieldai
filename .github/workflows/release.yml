name: 🚀 Release Management

on:
  push:
    tags:
      - 'v*.*.*'
  workflow_dispatch:
    inputs:
      release_type:
        description: 'Type of release'
        required: true
        default: 'patch'
        type: choice
        options:
        - patch
        - minor
        - major
      pre_release:
        description: 'Pre-release?'
        required: false
        default: false
        type: boolean

env:
  NODE_VERSION: '20.x'

jobs:
  # Version and Changelog
  prepare-release:
    name: 📋 Prepare Release
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch'
    outputs:
      new_version: ${{ steps.version.outputs.new_version }}
      changelog: ${{ steps.changelog.outputs.changelog }}
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0

      - name: 🟢 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📦 Install dependencies
        run: npm ci

      - name: 🏷️ Determine new version
        id: version
        run: |
          # Get current version
          CURRENT_VERSION=$(node -p "require('./package.json').version")
          echo "Current version: $CURRENT_VERSION"
          
          # Calculate new version
          case "${{ github.event.inputs.release_type }}" in
            "patch")
              NEW_VERSION=$(echo $CURRENT_VERSION | awk -F. '{$NF = $NF + 1;} 1' | sed 's/ /./g')
              ;;
            "minor")
              NEW_VERSION=$(echo $CURRENT_VERSION | awk -F. '{$(NF-1) = $(NF-1) + 1; $NF = 0;} 1' | sed 's/ /./g')
              ;;
            "major")
              NEW_VERSION=$(echo $CURRENT_VERSION | awk -F. '{$1 = $1 + 1; $2 = 0; $3 = 0;} 1' | sed 's/ /./g')
              ;;
          esac
          
          if [ "${{ github.event.inputs.pre_release }}" == "true" ]; then
            NEW_VERSION="${NEW_VERSION}-rc.$(date +%Y%m%d%H%M%S)"
          fi
          
          echo "New version: $NEW_VERSION"
          echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT

      - name: 📝 Generate changelog
        id: changelog
        run: |
          # Get commits since last tag
          LAST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
          
          if [ -z "$LAST_TAG" ]; then
            COMMITS=$(git log --pretty=format:"- %s (%h)" --no-merges)
          else
            COMMITS=$(git log $LAST_TAG..HEAD --pretty=format:"- %s (%h)" --no-merges)
          fi
          
          # Generate changelog
          CHANGELOG="## What's Changed\n\n$COMMITS"
          
          # Save changelog to file for later use
          echo -e "$CHANGELOG" > CHANGELOG_TEMP.md
          
          # Output for GitHub
          echo "changelog<<EOF" >> $GITHUB_OUTPUT
          echo -e "$CHANGELOG" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: 🔄 Update version in package.json
        run: |
          npm version ${{ steps.version.outputs.new_version }} --no-git-tag-version
          
      - name: 📝 Commit version bump
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add package.json package-lock.json
          git commit -m "🔖 Bump version to ${{ steps.version.outputs.new_version }}"
          git push

      - name: 🏷️ Create tag
        run: |
          git tag -a "v${{ steps.version.outputs.new_version }}" -m "Release v${{ steps.version.outputs.new_version }}"
          git push origin "v${{ steps.version.outputs.new_version }}"

  # Build Release Assets
  build-release:
    name: 🔨 Build Release Assets
    runs-on: ubuntu-latest
    needs: [prepare-release]
    if: always() && (github.event_name == 'push' || needs.prepare-release.result == 'success')
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🟢 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📦 Install dependencies
        run: npm ci

      - name: 🔨 Build application
        run: |
          npm run build
        env:
          NODE_ENV: production
          NEXT_TELEMETRY_DISABLED: 1

      - name: 📦 Create release archive
        run: |
          # Create a clean build archive
          tar -czf shield-ai-build.tar.gz \
            .next/ \
            public/ \
            package.json \
            package-lock.json \
            next.config.js \
            --exclude='node_modules' \
            --exclude='.git'

      - name: 📊 Generate build report
        run: |
          echo "# 🔨 Build Report" > BUILD_REPORT.md
          echo "" >> BUILD_REPORT.md
          echo "## Bundle Size" >> BUILD_REPORT.md
          du -sh .next/ >> BUILD_REPORT.md
          echo "" >> BUILD_REPORT.md
          echo "## Largest Files" >> BUILD_REPORT.md
          find .next/ -name "*.js" -exec du -h {} + | sort -hr | head -10 >> BUILD_REPORT.md

      - name: 📤 Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: release-assets
          path: |
            shield-ai-build.tar.gz
            BUILD_REPORT.md

  # Security Scan for Release
  security-scan:
    name: 🛡️ Security Scan
    runs-on: ubuntu-latest
    needs: [build-release]
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🟢 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📦 Install dependencies
        run: npm ci

      - name: 🔍 Security audit
        run: |
          npm audit --audit-level=high --json > security-audit.json || true
          
      - name: 🛡️ License check
        run: |
          npx license-checker --json > license-check.json

      - name: 📊 Generate security report
        run: |
          echo "# 🛡️ Security Report" > SECURITY_REPORT.md
          echo "" >> SECURITY_REPORT.md
          echo "## Audit Results" >> SECURITY_REPORT.md
          
          HIGH_VULNS=$(cat security-audit.json | jq '.metadata.vulnerabilities.high // 0')
          CRITICAL_VULNS=$(cat security-audit.json | jq '.metadata.vulnerabilities.critical // 0')
          
          if [ "$HIGH_VULNS" -eq 0 ] && [ "$CRITICAL_VULNS" -eq 0 ]; then
            echo "✅ No high or critical vulnerabilities found" >> SECURITY_REPORT.md
          else
            echo "⚠️ Found $HIGH_VULNS high and $CRITICAL_VULNS critical vulnerabilities" >> SECURITY_REPORT.md
          fi

      - name: 📤 Upload security artifacts
        uses: actions/upload-artifact@v4
        with:
          name: security-report
          path: |
            SECURITY_REPORT.md
            security-audit.json
            license-check.json

  # Create GitHub Release
  create-release:
    name: 🎉 Create GitHub Release
    runs-on: ubuntu-latest
    needs: [build-release, security-scan]
    if: always() && needs.build-release.result == 'success'
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 📥 Download artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./artifacts

      - name: 🏷️ Get version info
        id: version_info
        run: |
          if [ "${{ github.event_name }}" == "push" ]; then
            VERSION=${GITHUB_REF#refs/tags/v}
          else
            VERSION="${{ needs.prepare-release.outputs.new_version }}"
          fi
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          
          # Check if this is a pre-release
          if [[ "$VERSION" == *"rc"* ]] || [[ "$VERSION" == *"beta"* ]] || [[ "$VERSION" == *"alpha"* ]]; then
            echo "prerelease=true" >> $GITHUB_OUTPUT
          else
            echo "prerelease=false" >> $GITHUB_OUTPUT
          fi

      - name: 📝 Prepare release notes
        id: release_notes
        run: |
          # Combine changelog and reports
          NOTES="## 🚀 Shield AI v${{ steps.version_info.outputs.version }}\n\n"
          
          # Add changelog if available
          if [ -f "./artifacts/CHANGELOG_TEMP.md" ]; then
            NOTES="$NOTES$(cat ./artifacts/CHANGELOG_TEMP.md)\n\n"
          else
            # Generate from git if not available
            LAST_TAG=$(git describe --tags --abbrev=0 HEAD~1 2>/dev/null || echo "")
            if [ -n "$LAST_TAG" ]; then
              COMMITS=$(git log $LAST_TAG..HEAD --pretty=format:"- %s (%h)" --no-merges)
              NOTES="$NOTES## What's Changed\n\n$COMMITS\n\n"
            fi
          fi
          
          # Add build info
          if [ -f "./artifacts/release-assets/BUILD_REPORT.md" ]; then
            NOTES="$NOTES$(cat ./artifacts/release-assets/BUILD_REPORT.md)\n\n"
          fi
          
          # Add security info
          if [ -f "./artifacts/security-report/SECURITY_REPORT.md" ]; then
            NOTES="$NOTES$(cat ./artifacts/security-report/SECURITY_REPORT.md)\n\n"
          fi
          
          # Add deployment info
          NOTES="$NOTES## 🚀 Deployment\n\n"
          NOTES="$NOTES- **Production**: https://shieldai.vercel.app\n"
          NOTES="$NOTES- **Staging**: https://staging-shieldai.vercel.app\n"
          NOTES="$NOTES- **Development**: https://dev-shieldai.vercel.app\n\n"
          
          # Add installation instructions
          NOTES="$NOTES## 📦 Installation\n\n"
          NOTES="$NOTES\`\`\`bash\n"
          NOTES="$NOTESnpm install\nnpm run build\nnpm run start\n"
          NOTES="$NOTES\`\`\`\n\n"
          
          echo -e "$NOTES" > RELEASE_NOTES.md

      - name: 🎉 Create Release
        uses: ncipollo/release-action@v1
        with:
          tag: v${{ steps.version_info.outputs.version }}
          name: 🛡️ Shield AI v${{ steps.version_info.outputs.version }}
          bodyFile: RELEASE_NOTES.md
          draft: false
          prerelease: ${{ steps.version_info.outputs.prerelease }}
          artifacts: |
            ./artifacts/release-assets/shield-ai-build.tar.gz
            ./artifacts/security-report/SECURITY_REPORT.md
          token: ${{ secrets.GITHUB_TOKEN }}

  # Deploy Release
  deploy-release:
    name: 🚀 Deploy Release
    runs-on: ubuntu-latest
    needs: [create-release]
    environment: production
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🟢 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📦 Install dependencies
        run: npm ci

      - name: 🔨 Build for production
        run: npm run build
        env:
          NODE_ENV: production
          NEXT_TELEMETRY_DISABLED: 1
          NEXT_PUBLIC_SUPABASE_URL: ${{ secrets.NEXT_PUBLIC_SUPABASE_URL }}
          NEXT_PUBLIC_SUPABASE_ANON_KEY: ${{ secrets.NEXT_PUBLIC_SUPABASE_ANON_KEY }}
          NEXT_PUBLIC_STRIPE_PUBLISHABLE_KEY: ${{ secrets.NEXT_PUBLIC_STRIPE_PUBLISHABLE_KEY }}

      - name: 🚀 Deploy to Vercel
        uses: amondnet/vercel-action@v25
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
          vercel-args: '--prod'

      - name: 🏥 Post-deployment health check
        run: |
          echo "Waiting for deployment to be ready..."
          sleep 30
          
          # Health check
          for i in {1..5}; do
            if curl -f https://shieldai.vercel.app/api/health; then
              echo "✅ Health check passed"
              break
            else
              echo "❌ Health check failed, retrying in 10 seconds..."
              sleep 10
            fi
          done

  # Post-Release Tasks
  post-release:
    name: 📋 Post-Release Tasks
    runs-on: ubuntu-latest
    needs: [deploy-release]
    if: always() && needs.deploy-release.result == 'success'
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🎉 Create success notification
        uses: actions/github-script@v7
        with:
          script: |
            // Create a discussion for the release
            const { data: discussion } = await github.rest.repos.createRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              tag_name: 'v${{ needs.prepare-release.outputs.new_version || github.ref_name }}',
              name: '🎉 Release Discussion',
              body: 'Discuss this release, report issues, and share feedback!'
            });

      - name: 📊 Update project metrics
        run: |
          # This could integrate with analytics or project management tools
          echo "📊 Release metrics updated"
          
      - name: 🏷️ Tag Docker images (if applicable)
        run: |
          # If you have Docker images, tag them with the release version
          echo "🐳 Docker images would be tagged here"

      - name: 📧 Send release notifications
        run: |
          # This could send notifications to Slack, Discord, email, etc.
          echo "📧 Release notifications sent"