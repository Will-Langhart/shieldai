name: 🧪 Testing Suite

on:
  push:
    branches: [ main, dev, prod ]
  pull_request:
    branches: [ main, dev, prod ]
  schedule:
    # Run tests daily at 6 AM UTC
    - cron: '0 6 * * *'

env:
  NODE_VERSION: '20.x'

jobs:
  # Unit and Integration Tests
  unit-tests:
    name: 🔬 Unit & Integration Tests
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        node-version: [18.x, 20.x]
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🟢 Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'

      - name: 📦 Install dependencies
        run: npm ci --prefer-offline --no-audit

      - name: 🧪 Run unit tests
        run: |
          # Add when tests are implemented
          echo "Unit tests would run here"
          # npm run test:unit -- --coverage --watchAll=false

      - name: 🔗 Run integration tests
        run: |
          # Add when tests are implemented
          echo "Integration tests would run here"
          # npm run test:integration

      - name: 📊 Upload test coverage
        uses: codecov/codecov-action@v4
        if: matrix.node-version == '20.x'
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: ./coverage/lcov.info
          flags: unittests
          name: codecov-umbrella

  # API Tests
  api-tests:
    name: 🌐 API Tests
    runs-on: ubuntu-latest
    
    services:
      # If you need a test database
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_USER: postgres
          POSTGRES_DB: shieldai_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🟢 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📦 Install dependencies
        run: npm ci --prefer-offline --no-audit

      - name: 🔨 Build application
        run: npm run build

      - name: 🚀 Start application
        run: |
          npm run start &
          sleep 10
        env:
          NODE_ENV: test
          PORT: 3001

      - name: 🌐 Test API endpoints
        run: |
          # Health check
          curl -f http://localhost:3001/api/health || exit 1
          
          # Test Bible API endpoints
          curl -f http://localhost:3001/api/bible/versions || exit 1
          
          # Test chat endpoint (should return error without auth)
          curl -X POST http://localhost:3001/api/chat \
            -H "Content-Type: application/json" \
            -d '{"message": "test"}' \
            -w "%{http_code}" -o /dev/null | grep -E "4[0-9][0-9]"

      - name: 📊 API performance test
        run: |
          echo "Testing API response times..."
          for endpoint in "/api/health" "/api/bible/versions"; do
            echo "Testing $endpoint"
            curl -w "Response time: %{time_total}s\n" \
                 -o /dev/null \
                 -s \
                 "http://localhost:3001$endpoint"
          done

  # Browser Tests (E2E)
  e2e-tests:
    name: 🖥️ End-to-End Tests
    runs-on: ubuntu-latest
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🟢 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📦 Install dependencies
        run: npm ci --prefer-offline --no-audit

      - name: 🎭 Install Playwright
        run: |
          # When implementing E2E tests
          echo "Playwright would be installed here"
          # npx playwright install --with-deps

      - name: 🔨 Build application
        run: npm run build

      - name: 🚀 Start application
        run: |
          npm run start &
          sleep 10

      - name: 🎭 Run E2E tests
        run: |
          # When implementing E2E tests
          echo "E2E tests would run here"
          # npx playwright test

      - name: 📊 Upload E2E results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: e2e-results
          path: |
            test-results/
            playwright-report/

  # Accessibility Tests
  accessibility-tests:
    name: ♿ Accessibility Tests
    runs-on: ubuntu-latest
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🟢 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📦 Install dependencies
        run: npm ci --prefer-offline --no-audit

      - name: 🔨 Build application
        run: npm run build

      - name: 🚀 Start application
        run: |
          npm run start &
          sleep 10

      - name: ♿ Run accessibility tests
        run: |
          # Install axe-core CLI
          npm install -g @axe-core/cli
          
          # Test main pages for accessibility
          axe http://localhost:3001 --exit
          
          # Test with different user scenarios
          axe http://localhost:3001 --tags wcag2a,wcag2aa --exit

  # Security Tests
  security-tests:
    name: 🛡️ Security Tests
    runs-on: ubuntu-latest
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🟢 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📦 Install dependencies
        run: npm ci --prefer-offline --no-audit

      - name: 🔍 Security audit
        run: |
          npm audit --audit-level=moderate
          
      - name: 🔒 Check for secrets
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          base: main
          head: HEAD

      - name: 🛡️ OWASP ZAP security scan
        if: github.event_name == 'pull_request'
        run: |
          # Start the application
          npm run build
          npm run start &
          sleep 15
          
          # Run OWASP ZAP baseline scan
          docker run -v $(pwd):/zap/wrk/:rw \
            -t owasp/zap2docker-stable \
            zap-baseline.py \
            -t http://host.docker.internal:3001 \
            -r zap-report.html

      - name: 📊 Upload security results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: security-test-results
          path: |
            zap-report.html
            security-audit.json

  # Performance Tests
  performance-tests:
    name: ⚡ Performance Tests
    runs-on: ubuntu-latest
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🟢 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📦 Install dependencies
        run: npm ci --prefer-offline --no-audit

      - name: 🔨 Build application
        run: npm run build

      - name: 🚀 Start application
        run: |
          npm run start &
          sleep 10

      - name: ⚡ Load testing with Artillery
        run: |
          # Install Artillery
          npm install -g artillery
          
          # Create a simple load test config
          cat > artillery-config.yml << EOF
          config:
            target: 'http://localhost:3001'
            phases:
              - duration: 60
                arrivalRate: 5
          scenarios:
            - name: "Home page load test"
              requests:
                - get:
                    url: "/"
            - name: "API health check"
              requests:
                - get:
                    url: "/api/health"
          EOF
          
          # Run load test
          artillery run artillery-config.yml --output report.json
          artillery report report.json

      - name: 📊 Upload performance results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: performance-results
          path: |
            report.json
            report.json.html

  # Test Results Summary
  test-summary:
    name: 📋 Test Summary
    runs-on: ubuntu-latest
    needs: [unit-tests, api-tests, e2e-tests, accessibility-tests, security-tests, performance-tests]
    if: always()
    
    steps:
      - name: 📊 Generate test summary
        uses: actions/github-script@v7
        with:
          script: |
            const results = {
              'Unit Tests': '${{ needs.unit-tests.result }}',
              'API Tests': '${{ needs.api-tests.result }}',
              'E2E Tests': '${{ needs.e2e-tests.result }}',
              'Accessibility Tests': '${{ needs.accessibility-tests.result }}',
              'Security Tests': '${{ needs.security-tests.result }}',
              'Performance Tests': '${{ needs.performance-tests.result }}'
            };
            
            let summary = '## 🧪 Test Results Summary\n\n';
            let allPassed = true;
            
            for (const [test, result] of Object.entries(results)) {
              const emoji = result === 'success' ? '✅' : result === 'failure' ? '❌' : '⚠️';
              summary += `- ${emoji} ${test}: ${result}\n`;
              if (result !== 'success') allPassed = false;
            }
            
            if (allPassed) {
              summary += '\n🎉 All tests passed successfully!';
            } else {
              summary += '\n⚠️ Some tests failed. Please check the details above.';
            }
            
            core.summary.addRaw(summary);
            await core.summary.write();